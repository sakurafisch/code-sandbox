{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2","program":"C:\\Users\\10405\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rand_core","C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"std\"","-C","metadata=c9c55e34891ca8f8","-C","extra-filename=-c9c55e34891ca8f8","--out-dir","d:\\code-sandbox\\guessing_game\\target\\rls\\debug\\deps","-L","dependency=d:\\code-sandbox\\guessing_game\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\10405\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\code-sandbox\\guessing_game\\target\\rls\\debug\\deps\\librand_core-c9c55e34891ca8f8.rmeta"},"prelude":{"crate_id":{"name":"rand_core","disambiguator":[5426135088092612387,15212097408887161014]},"crate_root":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src","external_crates":[{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[45344308337484766,904807583985397655]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[17608585110195136257,12532935013018738971]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10644633998059158352,10345665241509147306]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18212625787733517551,4937265065110821766]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2699922135837212616,11588109643627721037]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16653465091603201180,18239440457404116996]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3073254730555026972,7758270140448631200]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13759999943095835806,4978516890064261122]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4575299228079760236,9361028770882531394]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10307147502021998988,15592389341950453369]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2670035867216739096,10315597156951015330]}},{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7309248630993686720,3186694738066578297]}}],"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":408,"byte_end":18940,"line_start":10,"line_end":477,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2029,"byte_end":2038,"line_start":53,"line_end":53,"column_start":17,"column_end":26},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2040,"byte_end":2045,"line_start":53,"line_end":53,"column_start":28,"column_end":33},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":408,"byte_end":18940,"line_start":10,"line_end":477,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":202},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":32},{"krate":0,"index":96},{"krate":0,"index":118},{"krate":0,"index":123},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":137},{"krate":0,"index":144},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":155}],"decl_id":null,"docs":" Random number generation traits","sig":null,"attributes":[{"value":"/ Random number generation traits","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":408,"byte_end":443,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":444,"byte_end":447,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This crate is mainly of interest to crates publishing implementations of","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":448,"byte_end":524,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ [`RngCore`]. Other users are encouraged to use the [`rand`] crate instead","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":525,"byte_end":602,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ which re-exports the main traits and error types.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":603,"byte_end":656,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":657,"byte_end":660,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [`RngCore`] is the core trait implemented by algorithmic pseudo-random number","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":661,"byte_end":742,"line_start":16,"line_end":16,"column_start":1,"column_end":82}},{"value":"/ generators and external random-number sources.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":743,"byte_end":793,"line_start":17,"line_end":17,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":794,"byte_end":797,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`SeedableRng`] is an extension trait for construction from fixed seeds and","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":798,"byte_end":877,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ other random number generators.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":878,"byte_end":913,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":914,"byte_end":917,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [`Error`] is provided for error-handling. It is safe to use in `no_std`","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":918,"byte_end":993,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ environments.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":994,"byte_end":1011,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":1012,"byte_end":1015,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The [`impls`] and [`le`] sub-modules include a few small functions to assist","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":1016,"byte_end":1096,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ implementation of [`RngCore`].","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":1097,"byte_end":1131,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":1132,"byte_end":1135,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":1136,"byte_end":1170,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":1387,"byte_end":1409,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":1410,"byte_end":1449,"line_start":35,"line_end":35,"column_start":1,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19814,"byte_end":19825,"line_start":26,"line_end":26,"column_start":5,"column_end":16},"name":"Unavailable","qualname":"::error::ErrorKind::Unavailable","value":"ErrorKind::Unavailable","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" Feature is not available; not recoverable.\n \n This is the most permanent failure type and implies the error cannot be\n resolved simply by retrying (e.g. the feature may not exist in this\n build of the application or on the current platform).\n","sig":null,"attributes":[{"value":"/ Feature is not available; not recoverable.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19536,"byte_end":19582,"line_start":21,"line_end":21,"column_start":5,"column_end":51}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19587,"byte_end":19591,"line_start":22,"line_end":22,"column_start":5,"column_end":9}},{"value":"/ This is the most permanent failure type and implies the error cannot be","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19596,"byte_end":19671,"line_start":23,"line_end":23,"column_start":5,"column_end":80}},{"value":"/ resolved simply by retrying (e.g. the feature may not exist in this","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19676,"byte_end":19747,"line_start":24,"line_end":24,"column_start":5,"column_end":76}},{"value":"/ build of the application or on the current platform).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19752,"byte_end":19809,"line_start":25,"line_end":25,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20241,"byte_end":20251,"line_start":35,"line_end":35,"column_start":5,"column_end":15},"name":"Unexpected","qualname":"::error::ErrorKind::Unexpected","value":"ErrorKind::Unexpected","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" General failure; there may be a chance of recovery on retry.\n \n This is the catch-all kind for errors from known and unknown sources\n which do not have a more specific kind / handling method.\n \n It is suggested to retry a couple of times or retry later when\n handling; some error sources may be able to resolve themselves,\n although this is not likely.\n","sig":null,"attributes":[{"value":"/ General failure; there may be a chance of recovery on retry.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19831,"byte_end":19895,"line_start":27,"line_end":27,"column_start":5,"column_end":69}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19900,"byte_end":19904,"line_start":28,"line_end":28,"column_start":5,"column_end":9}},{"value":"/ This is the catch-all kind for errors from known and unknown sources","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19909,"byte_end":19981,"line_start":29,"line_end":29,"column_start":5,"column_end":77}},{"value":"/ which do not have a more specific kind / handling method.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19986,"byte_end":20047,"line_start":30,"line_end":30,"column_start":5,"column_end":66}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20052,"byte_end":20056,"line_start":31,"line_end":31,"column_start":5,"column_end":9}},{"value":"/ It is suggested to retry a couple of times or retry later when","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20061,"byte_end":20127,"line_start":32,"line_end":32,"column_start":5,"column_end":71}},{"value":"/ handling; some error sources may be able to resolve themselves,","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20132,"byte_end":20199,"line_start":33,"line_end":33,"column_start":5,"column_end":72}},{"value":"/ although this is not likely.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20204,"byte_end":20236,"line_start":34,"line_end":34,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20497,"byte_end":20506,"line_start":40,"line_end":40,"column_start":5,"column_end":14},"name":"Transient","qualname":"::error::ErrorKind::Transient","value":"ErrorKind::Transient","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" A transient failure which likely can be resolved or worked around.\n \n This error kind exists for a few specific cases where it is known that\n the error likely can be resolved internally, but is reported anyway.\n","sig":null,"attributes":[{"value":"/ A transient failure which likely can be resolved or worked around.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20257,"byte_end":20327,"line_start":36,"line_end":36,"column_start":5,"column_end":75}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20332,"byte_end":20336,"line_start":37,"line_end":37,"column_start":5,"column_end":9}},{"value":"/ This error kind exists for a few specific cases where it is known that","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20341,"byte_end":20415,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/ the error likely can be resolved internally, but is reported anyway.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20420,"byte_end":20492,"line_start":39,"line_end":39,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20861,"byte_end":20869,"line_start":47,"line_end":47,"column_start":5,"column_end":13},"name":"NotReady","qualname":"::error::ErrorKind::NotReady","value":"ErrorKind::NotReady","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" Not ready yet: recommended to try again a little later.\n \n This error kind implies the generator needs more time or needs some\n other part of the application to do something else first before it is\n ready for use; for example this may be used by external generators\n which require time for initialization.\n","sig":null,"attributes":[{"value":"/ Not ready yet: recommended to try again a little later.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20512,"byte_end":20571,"line_start":41,"line_end":41,"column_start":5,"column_end":64}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20576,"byte_end":20580,"line_start":42,"line_end":42,"column_start":5,"column_end":9}},{"value":"/ This error kind implies the generator needs more time or needs some","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20585,"byte_end":20656,"line_start":43,"line_end":43,"column_start":5,"column_end":76}},{"value":"/ other part of the application to do something else first before it is","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20661,"byte_end":20734,"line_start":44,"line_end":44,"column_start":5,"column_end":78}},{"value":"/ ready for use; for example this may be used by external generators","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20739,"byte_end":20809,"line_start":45,"line_end":45,"column_start":5,"column_end":75}},{"value":"/ which require time for initialization.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20814,"byte_end":20856,"line_start":46,"line_end":46,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20894,"byte_end":20909,"line_start":49,"line_end":49,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19520,"byte_end":19529,"line_start":20,"line_end":20,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"pub enum ErrorKind {\n\n    /// Feature is not available; not recoverable.\n    /// \n    /// This is the most permanent failure type and implies the error cannot be\n    /// resolved simply by retrying (e.g. the feature may not exist in this\n    /// build of the application or on the current platform).\n    Unavailable,\n\n    /// General failure; there may be a chance of recovery on retry.\n    /// \n    /// This is the catch-all kind for errors from known and unknown sources\n    /// which do not have a more specific kind / handling method.\n    /// \n    /// It is suggested to retry a couple of times or retry later when\n    /// handling; some error sources may be able to resolve themselves,\n    /// although this is not likely.\n    Unexpected,\n\n    /// A transient failure which likely can be resolved or worked around.\n    /// \n    /// This error kind exists for a few specific cases where it is known that\n    /// the error likely can be resolved internally, but is reported anyway.\n    Transient,\n\n    /// Not ready yet: recommended to try again a little later.\n    /// \n    /// This error kind implies the generator needs more time or needs some\n    /// other part of the application to do something else first before it is\n    /// ready for use; for example this may be used by external generators\n    /// which require time for initialization.\n    NotReady,\n\n    #[doc(hidden)]\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166}],"decl_id":null,"docs":" Error kind which can be matched over.\n","sig":null,"attributes":[{"value":"/ Error kind which can be matched over.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":19424,"byte_end":19465,"line_start":18,"line_end":18,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21049,"byte_end":21061,"line_start":56,"line_end":56,"column_start":12,"column_end":24},"name":"should_retry","qualname":"<ErrorKind>::should_retry","value":"pub fn should_retry(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this kind of error may resolve itself on retry.\n \n See also `should_wait()`.\n","sig":null,"attributes":[{"value":"/ True if this kind of error may resolve itself on retry.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20935,"byte_end":20994,"line_start":53,"line_end":53,"column_start":5,"column_end":64}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20999,"byte_end":21003,"line_start":54,"line_end":54,"column_start":5,"column_end":9}},{"value":"/ See also `should_wait()`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21008,"byte_end":21037,"line_start":55,"line_end":55,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21252,"byte_end":21263,"line_start":63,"line_end":63,"column_start":12,"column_end":23},"name":"should_wait","qualname":"<ErrorKind>::should_wait","value":"pub fn should_wait(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if we should retry but wait before retrying\n \n This implies `should_retry()` is true.\n","sig":null,"attributes":[{"value":"/ True if we should retry but wait before retrying","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21132,"byte_end":21184,"line_start":60,"line_end":60,"column_start":5,"column_end":57}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21189,"byte_end":21193,"line_start":61,"line_end":61,"column_start":5,"column_end":9}},{"value":"/ This implies `should_retry()` is true.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21198,"byte_end":21240,"line_start":62,"line_end":62,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21379,"byte_end":21390,"line_start":68,"line_end":68,"column_start":12,"column_end":23},"name":"description","qualname":"<ErrorKind>::description","value":"pub fn description(Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" A description of this error kind\n","sig":null,"attributes":[{"value":"/ A description of this error kind","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21331,"byte_end":21367,"line_start":67,"line_end":67,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22258,"byte_end":22263,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error { kind, msg }","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182}],"decl_id":null,"docs":" Error type of random number generators\n \n This is a relatively simple error type, designed for compatibility with and\n without the Rust `std` library. It embeds a \"kind\" code, a message (static\n string only), and an optional chained cause (`std` only). The `kind` and\n `msg` fields can be accessed directly; cause can be accessed via\n `std::error::Error::cause` or `Error::take_cause`. Construction can only be\n done via `Error::new` or `Error::with_cause`.\n","sig":null,"attributes":[{"value":"/ Error type of random number generators","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21747,"byte_end":21789,"line_start":80,"line_end":80,"column_start":1,"column_end":43}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21790,"byte_end":21794,"line_start":81,"line_end":81,"column_start":1,"column_end":5}},{"value":"/ This is a relatively simple error type, designed for compatibility with and","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21795,"byte_end":21874,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/ without the Rust `std` library. It embeds a \"kind\" code, a message (static","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21875,"byte_end":21953,"line_start":83,"line_end":83,"column_start":1,"column_end":79}},{"value":"/ string only), and an optional chained cause (`std` only). The `kind` and","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":21954,"byte_end":22030,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ `msg` fields can be accessed directly; cause can be accessed via","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22031,"byte_end":22099,"line_start":85,"line_end":85,"column_start":1,"column_end":69}},{"value":"/ `std::error::Error::cause` or `Error::take_cause`. Construction can only be","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22100,"byte_end":22179,"line_start":86,"line_end":86,"column_start":1,"column_end":80}},{"value":"/ done via `Error::new` or `Error::with_cause`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22180,"byte_end":22229,"line_start":87,"line_end":87,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22297,"byte_end":22301,"line_start":91,"line_end":91,"column_start":9,"column_end":13},"name":"kind","qualname":"::error::Error::kind","value":"error::ErrorKind","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" The error kind\n","sig":null,"attributes":[{"value":"/ The error kind","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22270,"byte_end":22288,"line_start":90,"line_end":90,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22348,"byte_end":22351,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"name":"msg","qualname":"::error::Error::msg","value":"&'static str","parent":{"krate":0,"index":179},"children":[],"decl_id":null,"docs":" The error message\n","sig":null,"attributes":[{"value":"/ The error message","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22318,"byte_end":22339,"line_start":92,"line_end":92,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22534,"byte_end":22537,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"pub fn new(ErrorKind, &'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, with specified kind and a message.\n","sig":null,"attributes":[{"value":"/ Create a new instance, with specified kind and a message.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22461,"byte_end":22522,"line_start":99,"line_end":99,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":23232,"byte_end":23242,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"with_cause","qualname":"<Error>::with_cause","value":"pub fn with_cause<E>(ErrorKind, &'static str, E) -> Self where\nE: Into<Box<stdError + Send + Sync>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, with specified kind, message, and a\n chained cause.\n \n Note: `stdError` is an alias for `std::error::Error`.\n \n If not targetting `std` (i.e. `no_std`), this function is replaced by\n another with the same prototype, except that there are no bounds on the\n type `E` (because both `Box` and `stdError` are unavailable), and the\n `cause` is ignored.\n","sig":null,"attributes":[{"value":"/ Create a new instance, with specified kind, message, and a","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22765,"byte_end":22827,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"/ chained cause.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22832,"byte_end":22850,"line_start":110,"line_end":110,"column_start":5,"column_end":23}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22855,"byte_end":22859,"line_start":111,"line_end":111,"column_start":5,"column_end":9}},{"value":"/ Note: `stdError` is an alias for `std::error::Error`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22864,"byte_end":22921,"line_start":112,"line_end":112,"column_start":5,"column_end":62}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22926,"byte_end":22930,"line_start":113,"line_end":113,"column_start":5,"column_end":9}},{"value":"/ If not targetting `std` (i.e. `no_std`), this function is replaced by","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22935,"byte_end":23008,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ another with the same prototype, except that there are no bounds on the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":23013,"byte_end":23088,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ type `E` (because both `Box` and `stdError` are unavailable), and the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":23093,"byte_end":23166,"line_start":116,"line_end":116,"column_start":5,"column_end":78}},{"value":"/ `cause` is ignored.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":23171,"byte_end":23194,"line_start":117,"line_end":117,"column_start":5,"column_end":28}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":23199,"byte_end":23220,"line_start":118,"line_end":118,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":23904,"byte_end":23914,"line_start":137,"line_end":137,"column_start":12,"column_end":22},"name":"take_cause","qualname":"<Error>::take_cause","value":"pub fn take_cause(&mut Self) -> Option<Box<stdError + Send + Sync>>","parent":null,"children":[],"decl_id":null,"docs":" Take the cause, if any. This allows the embedded cause to be extracted.\n This uses `Option::take`, leaving `self` with no cause.\n","sig":null,"attributes":[{"value":"/ Take the cause, if any. This allows the embedded cause to be extracted.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":23727,"byte_end":23802,"line_start":134,"line_end":134,"column_start":5,"column_end":80}},{"value":"/ This uses `Option::take`, leaving `self` with no cause.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":23807,"byte_end":23866,"line_start":135,"line_end":135,"column_start":5,"column_end":64}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":23871,"byte_end":23892,"line_start":136,"line_end":136,"column_start":5,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":185},{"krate":0,"index":190},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":58},{"krate":0,"index":65},{"krate":0,"index":193},{"krate":0,"index":199},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":81},{"krate":0,"index":87},{"krate":0,"index":94}],"decl_id":null,"docs":" The `BlockRngCore` trait and implementation helpers","sig":null,"attributes":[{"value":"/ The `BlockRngCore` trait and implementation helpers","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25442,"byte_end":25497,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25498,"byte_end":25501,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The [`BlockRngCore`] trait exists to assist in the implementation of RNGs","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25502,"byte_end":25579,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ which generate a block of data in a cache instead of returning generated","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25580,"byte_end":25656,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ values directly.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25657,"byte_end":25677,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25678,"byte_end":25681,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Usage of this trait is optional, but provides two advantages:","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25682,"byte_end":25747,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"/ implementations only need to concern themselves with generation of the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25748,"byte_end":25822,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ block, not the various [`RngCore`] methods (especially [`fill_bytes`], where","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25823,"byte_end":25903,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ the optimal implementations are not trivial), and this allows","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25904,"byte_end":25969,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ `ReseedingRng` (see [`rand`](https://docs.rs/rand) crate) perform periodic","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":25970,"byte_end":26048,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ reseeding with very low overhead.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26049,"byte_end":26086,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26087,"byte_end":26090,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26091,"byte_end":26104,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26105,"byte_end":26108,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```norun","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26109,"byte_end":26121,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/ use rand_core::block::{BlockRngCore, BlockRng};","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26122,"byte_end":26173,"line_start":25,"line_end":25,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26174,"byte_end":26177,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ struct MyRngCore;","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26178,"byte_end":26199,"line_start":27,"line_end":27,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26200,"byte_end":26203,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ impl BlockRngCore for MyRngCore {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26204,"byte_end":26241,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/     type Results = [u32; 16];","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26242,"byte_end":26275,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26276,"byte_end":26279,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     fn generate(&mut self, results: &mut Self::Results) {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26280,"byte_end":26341,"line_start":32,"line_end":32,"column_start":1,"column_end":62}},{"value":"/         unimplemented!()","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26342,"byte_end":26370,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26371,"byte_end":26380,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26381,"byte_end":26386,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26387,"byte_end":26390,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ impl SeedableRng for MyRngCore {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26391,"byte_end":26427,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/     type Seed = unimplemented!();","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26428,"byte_end":26465,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/     fn from_seed(seed: Self::Seed) -> Self {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26466,"byte_end":26514,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/         unimplemented!()","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26515,"byte_end":26543,"line_start":40,"line_end":40,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26544,"byte_end":26553,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26554,"byte_end":26559,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26560,"byte_end":26563,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // optionally, also implement CryptoRng for MyRngCore","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26564,"byte_end":26621,"line_start":44,"line_end":44,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26622,"byte_end":26625,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // Final RNG.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26626,"byte_end":26643,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/ type MyRng = BlockRng<u32, MyRngCore>;","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26644,"byte_end":26686,"line_start":47,"line_end":47,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26687,"byte_end":26694,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26695,"byte_end":26698,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: crate::block::BlockRngCore","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26699,"byte_end":26747,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26748,"byte_end":26787,"line_start":51,"line_end":51,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27211,"byte_end":27223,"line_start":63,"line_end":63,"column_start":11,"column_end":23},"name":"BlockRngCore","qualname":"::block::BlockRngCore","value":"BlockRngCore","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"decl_id":null,"docs":" A trait for RNGs which do not generate random numbers individually, but in\n blocks (typically `[u32; N]`). This technique is commonly used by\n cryptographic RNGs to improve performance.","sig":null,"attributes":[{"value":"/ A trait for RNGs which do not generate random numbers individually, but in","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":26939,"byte_end":27017,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/ blocks (typically `[u32; N]`). This technique is commonly used by","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27018,"byte_end":27087,"line_start":59,"line_end":59,"column_start":1,"column_end":70}},{"value":"/ cryptographic RNGs to improve performance.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27088,"byte_end":27134,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27135,"byte_end":27138,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ See the [module][crate::block] documentation for details.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27139,"byte_end":27200,"line_start":62,"line_end":62,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27277,"byte_end":27281,"line_start":65,"line_end":65,"column_start":10,"column_end":14},"name":"Item","qualname":"::block::BlockRngCore::Item","value":"type Item;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Results element type, e.g. `u32`.\n","sig":null,"attributes":[{"value":"/ Results element type, e.g. `u32`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27230,"byte_end":27267,"line_start":64,"line_end":64,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27438,"byte_end":27445,"line_start":69,"line_end":69,"column_start":10,"column_end":17},"name":"Results","qualname":"::block::BlockRngCore::Results","value":"type Results: AsRef<[Self::Item]> + AsMut<[Self::Item]> + Default;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Results type. This is the 'block' an RNG implementing `BlockRngCore`\n generates, which will usually be an array like `[u32; 16]`.\n","sig":null,"attributes":[{"value":"/ Results type. This is the 'block' an RNG implementing `BlockRngCore`","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27288,"byte_end":27360,"line_start":67,"line_end":67,"column_start":5,"column_end":77}},{"value":"/ generates, which will usually be an array like `[u32; 16]`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27365,"byte_end":27428,"line_start":68,"line_end":68,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27549,"byte_end":27557,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"generate","qualname":"::block::BlockRngCore::generate","value":"pub fn generate(&mut Self, &mut Self::Results)","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Generate a new block of results.\n","sig":null,"attributes":[{"value":"/ Generate a new block of results.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27505,"byte_end":27541,"line_start":71,"line_end":71,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29574,"byte_end":29582,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"BlockRng","qualname":"::block::BlockRng","value":"BlockRng { core }","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[{"value":"/ A wrapper type implementing [`RngCore`] for some type implementing","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27603,"byte_end":27673,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/ [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27674,"byte_end":27754,"line_start":77,"line_end":77,"column_start":1,"column_end":81}},{"value":"/ a full RNG from just a `generate` function.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27755,"byte_end":27802,"line_start":78,"line_end":78,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27803,"byte_end":27806,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ The `core` field may be accessed directly but the results buffer may not.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27807,"byte_end":27884,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/ PRNG implementations can simply use a type alias","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27885,"byte_end":27937,"line_start":81,"line_end":81,"column_start":1,"column_end":53}},{"value":"/ (`pub type MyRng = BlockRng<MyRngCore>;`) but might prefer to use a","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":27938,"byte_end":28009,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/ wrapper type (`pub struct MyRng(BlockRng<MyRngCore>);`); the latter must","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28010,"byte_end":28086,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/ re-implement `RngCore` but hides the implementation details and allows","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28087,"byte_end":28161,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ extra functionality to be defined on the RNG","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28162,"byte_end":28210,"line_start":85,"line_end":85,"column_start":1,"column_end":49}},{"value":"/ (e.g. `impl MyRng { fn set_stream(...){...} }`).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28211,"byte_end":28263,"line_start":86,"line_end":86,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28264,"byte_end":28267,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ `BlockRng` has heavily optimized implementations of the [`RngCore`] methods","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28268,"byte_end":28347,"line_start":88,"line_end":88,"column_start":1,"column_end":80}},{"value":"/ reading values from the results buffer, as well as","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28348,"byte_end":28402,"line_start":89,"line_end":89,"column_start":1,"column_end":55}},{"value":"/ calling [`BlockRngCore::generate`] directly on the output array when","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28403,"byte_end":28475,"line_start":90,"line_end":90,"column_start":1,"column_end":73}},{"value":"/ [`fill_bytes`] / [`try_fill_bytes`] is called on a large array. These methods","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28476,"byte_end":28557,"line_start":91,"line_end":91,"column_start":1,"column_end":82}},{"value":"/ also handle the bookkeeping of when to generate a new batch of values.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28558,"byte_end":28632,"line_start":92,"line_end":92,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28633,"byte_end":28636,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ No whole generated `u32` values are thown away and all values are consumed","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28637,"byte_end":28715,"line_start":94,"line_end":94,"column_start":1,"column_end":79}},{"value":"/ in-order. [`next_u32`] simply takes the next available `u32` value.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28716,"byte_end":28787,"line_start":95,"line_end":95,"column_start":1,"column_end":72}},{"value":"/ [`next_u64`] is implemented by combining two `u32` values, least","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28788,"byte_end":28856,"line_start":96,"line_end":96,"column_start":1,"column_end":69}},{"value":"/ significant first. [`fill_bytes`] and [`try_fill_bytes`] consume a whole","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28857,"byte_end":28933,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/ number of `u32` values, converting each `u32` to a byte slice in","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":28934,"byte_end":29002,"line_start":98,"line_end":98,"column_start":1,"column_end":69}},{"value":"/ little-endian order. If the requested byte length is not a multiple of 4,","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29003,"byte_end":29080,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/ some bytes will be discarded.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29081,"byte_end":29114,"line_start":100,"line_end":100,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29115,"byte_end":29118,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ See also [`BlockRng64`] which uses `u64` array buffers. Currently there is","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29119,"byte_end":29197,"line_start":102,"line_end":102,"column_start":1,"column_end":79}},{"value":"/ no direct support for other buffer types.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29198,"byte_end":29243,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29244,"byte_end":29247,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ For easy initialization `BlockRng` also implements [`SeedableRng`].","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29248,"byte_end":29319,"line_start":105,"line_end":105,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29320,"byte_end":29323,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ [`next_u32`]: RngCore::next_u32","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29324,"byte_end":29359,"line_start":107,"line_end":107,"column_start":1,"column_end":36}},{"value":"/ [`next_u64`]: RngCore::next_u64","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29360,"byte_end":29395,"line_start":108,"line_end":108,"column_start":1,"column_end":36}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29396,"byte_end":29435,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29436,"byte_end":29483,"line_start":110,"line_end":110,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29736,"byte_end":29740,"line_start":117,"line_end":117,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng::core","value":"R","parent":{"krate":0,"index":185},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[{"value":"/ The *core* part of the RNG, implementing the `generate` function.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29658,"byte_end":29727,"line_start":116,"line_end":116,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30350,"byte_end":30353,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng<R>>::new","value":"pub fn new(R) -> BlockRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"/ Create a new `BlockRng` from an existing RNG implementing","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30199,"byte_end":30260,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ `BlockRngCore`. Results will be generated on first use.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30265,"byte_end":30324,"line_start":133,"line_end":133,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30329,"byte_end":30338,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30828,"byte_end":30833,"line_start":150,"line_end":150,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng<R>>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"/ Get the index into the result buffer.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30573,"byte_end":30614,"line_start":144,"line_end":144,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30619,"byte_end":30622,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ If this is equal to or larger than the size of the result buffer then","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30627,"byte_end":30700,"line_start":146,"line_end":146,"column_start":5,"column_end":78}},{"value":"/ the buffer is \"empty\" and `generate()` must be called to produce new","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30705,"byte_end":30777,"line_start":147,"line_end":147,"column_start":5,"column_end":77}},{"value":"/ results.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30782,"byte_end":30794,"line_start":148,"line_end":148,"column_start":5,"column_end":17}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30799,"byte_end":30816,"line_start":149,"line_end":149,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":31024,"byte_end":31029,"line_start":157,"line_end":157,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng<R>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"/ Reset the number of available results.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30882,"byte_end":30924,"line_start":154,"line_end":154,"column_start":5,"column_end":47}},{"value":"/ This will force a new set of results to be generated on next use.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30929,"byte_end":30998,"line_start":155,"line_end":155,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":31003,"byte_end":31012,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":31222,"byte_end":31238,"line_start":164,"line_end":164,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng<R>>::generate_and_set","value":"pub fn generate_and_set(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"/ Generate a new set of results immediately, setting the index to the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":31104,"byte_end":31175,"line_start":161,"line_end":161,"column_start":5,"column_end":76}},{"value":"/ given value.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":31180,"byte_end":31196,"line_start":162,"line_end":162,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":31201,"byte_end":31210,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35173,"byte_end":35183,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"BlockRng64","qualname":"::block::BlockRng64","value":"BlockRng64 { core }","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[{"value":"/ A wrapper type implementing [`RngCore`] for some type implementing","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":33978,"byte_end":34048,"line_start":260,"line_end":260,"column_start":1,"column_end":71}},{"value":"/ [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34049,"byte_end":34129,"line_start":261,"line_end":261,"column_start":1,"column_end":81}},{"value":"/ a full RNG from just a `generate` function.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34130,"byte_end":34177,"line_start":262,"line_end":262,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34178,"byte_end":34181,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ This is similar to [`BlockRng`], but specialized for algorithms that operate","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34182,"byte_end":34262,"line_start":264,"line_end":264,"column_start":1,"column_end":81}},{"value":"/ on `u64` values.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34263,"byte_end":34283,"line_start":265,"line_end":265,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34284,"byte_end":34287,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ No whole generated `u64` values are thrown away and all values are consumed","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34288,"byte_end":34367,"line_start":267,"line_end":267,"column_start":1,"column_end":80}},{"value":"/ in-order. [`next_u64`] simply takes the next available `u64` value.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34368,"byte_end":34439,"line_start":268,"line_end":268,"column_start":1,"column_end":72}},{"value":"/ [`next_u32`] is however a bit special: half of a `u64` is consumed, leaving","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34440,"byte_end":34519,"line_start":269,"line_end":269,"column_start":1,"column_end":80}},{"value":"/ the other half in the buffer. If the next function called is [`next_u32`]","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34520,"byte_end":34597,"line_start":270,"line_end":270,"column_start":1,"column_end":78}},{"value":"/ then the other half is then consumed, however both [`next_u64`] and","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34598,"byte_end":34669,"line_start":271,"line_end":271,"column_start":1,"column_end":72}},{"value":"/ [`fill_bytes`] discard the rest of any half-consumed `u64`s when called.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34670,"byte_end":34746,"line_start":272,"line_end":272,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34747,"byte_end":34750,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ [`fill_bytes`] and [`try_fill_bytes`] consume a whole number of `u64`","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34751,"byte_end":34824,"line_start":274,"line_end":274,"column_start":1,"column_end":74}},{"value":"/ values. If the requested length is not a multiple of 8, some bytes will be","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34825,"byte_end":34903,"line_start":275,"line_end":275,"column_start":1,"column_end":79}},{"value":"/ discarded.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34904,"byte_end":34918,"line_start":276,"line_end":276,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34919,"byte_end":34922,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ [`next_u32`]: RngCore::next_u32","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34923,"byte_end":34958,"line_start":278,"line_end":278,"column_start":1,"column_end":36}},{"value":"/ [`next_u64`]: RngCore::next_u64","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34959,"byte_end":34994,"line_start":279,"line_end":279,"column_start":1,"column_end":36}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":34995,"byte_end":35034,"line_start":280,"line_end":280,"column_start":1,"column_end":40}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35035,"byte_end":35082,"line_start":281,"line_end":281,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35410,"byte_end":35414,"line_start":289,"line_end":289,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng64::core","value":"R","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[{"value":"/ The *core* part of the RNG, implementing the `generate` function.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35332,"byte_end":35401,"line_start":288,"line_end":288,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36078,"byte_end":36081,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng64<R>>::new","value":"pub fn new(R) -> BlockRng64<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"/ Create a new `BlockRng` from an existing RNG implementing","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35927,"byte_end":35988,"line_start":305,"line_end":305,"column_start":5,"column_end":66}},{"value":"/ `BlockRngCore`. Results will be generated on first use.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35993,"byte_end":36052,"line_start":306,"line_end":306,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36057,"byte_end":36066,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36590,"byte_end":36595,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng64<R>>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"/ Get the index into the result buffer.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36335,"byte_end":36376,"line_start":318,"line_end":318,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36381,"byte_end":36384,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ If this is equal to or larger than the size of the result buffer then","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36389,"byte_end":36462,"line_start":320,"line_end":320,"column_start":5,"column_end":78}},{"value":"/ the buffer is \"empty\" and `generate()` must be called to produce new","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36467,"byte_end":36539,"line_start":321,"line_end":321,"column_start":5,"column_end":77}},{"value":"/ results.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36544,"byte_end":36556,"line_start":322,"line_end":322,"column_start":5,"column_end":17}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36561,"byte_end":36578,"line_start":323,"line_end":323,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36786,"byte_end":36791,"line_start":331,"line_end":331,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng64<R>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"/ Reset the number of available results.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36644,"byte_end":36686,"line_start":328,"line_end":328,"column_start":5,"column_end":47}},{"value":"/ This will force a new set of results to be generated on next use.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36691,"byte_end":36760,"line_start":329,"line_end":329,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36765,"byte_end":36774,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":37016,"byte_end":37032,"line_start":339,"line_end":339,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng64<R>>::generate_and_set","value":"pub fn generate_and_set(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"/ Generate a new set of results immediately, setting the index to the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36898,"byte_end":36969,"line_start":336,"line_end":336,"column_start":5,"column_end":76}},{"value":"/ given value.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36974,"byte_end":36990,"line_start":337,"line_end":337,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":36995,"byte_end":37004,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"impls","qualname":"::impls","value":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116}],"decl_id":null,"docs":" Helper functions for implementing `RngCore` functions.","sig":null,"attributes":[{"value":"/ Helper functions for implementing `RngCore` functions.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40128,"byte_end":40186,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40187,"byte_end":40190,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ For cross-platform reproducibility, these functions all use Little Endian:","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40191,"byte_end":40269,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ least-significant part first. For example, `next_u64_via_u32` takes `u32`","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40270,"byte_end":40347,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ values `x, y`, then outputs `(y << 32) | x`. To implement `next_u32`","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40348,"byte_end":40420,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ from `next_u64` in little-endian order, one should use `next_u64() as u32`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40421,"byte_end":40500,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40501,"byte_end":40504,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Byte-swapping (like the std `to_le` functions) is only needed to convert","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40505,"byte_end":40581,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ to/from byte sequences, and since its purpose is reproducibility,","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40582,"byte_end":40651,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ non-reproducible sources (e.g. `OsRng`) need not bother with it.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40652,"byte_end":40720,"line_start":18,"line_end":18,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40936,"byte_end":40952,"line_start":29,"line_end":29,"column_start":8,"column_end":24},"name":"next_u64_via_u32","qualname":"::impls::next_u64_via_u32","value":"pub fn next_u64_via_u32<R: RngCore + ?Sized>(&mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `next_u32`, little-endian order.\n","sig":null,"attributes":[{"value":"/ Implement `next_u64` via `next_u32`, little-endian order.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":40867,"byte_end":40928,"line_start":28,"line_end":28,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":41499,"byte_end":41518,"line_start":42,"line_end":42,"column_start":8,"column_end":27},"name":"fill_bytes_via_next","qualname":"::impls::fill_bytes_via_next","value":"pub fn fill_bytes_via_next<R: RngCore + ?Sized>(&mut R, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","sig":null,"attributes":[{"value":"/ Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":41160,"byte_end":41238,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":41239,"byte_end":41242,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The fastest way to fill a slice is usually to work as long as possible with","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":41243,"byte_end":41322,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ integers. That is why this method mostly uses `next_u64`, and only when","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":41323,"byte_end":41398,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ there are 4 or less bytes remaining at the end of the slice it uses","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":41399,"byte_end":41470,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ `next_u32` once.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":41471,"byte_end":41491,"line_start":41,"line_end":41,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44379,"byte_end":44398,"line_start":137,"line_end":137,"column_start":8,"column_end":27},"name":"fill_via_u32_chunks","qualname":"::impls::fill_via_u32_chunks","value":"pub fn fill_via_u32_chunks(&[u32], &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[{"value":"/ Implement `fill_bytes` by reading chunks from the output buffer of a block","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43439,"byte_end":43517,"line_start":107,"line_end":107,"column_start":1,"column_end":79}},{"value":"/ based RNG.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43518,"byte_end":43532,"line_start":108,"line_end":108,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43533,"byte_end":43536,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ The return values are `(consumed_u32, filled_u8)`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43537,"byte_end":43591,"line_start":110,"line_end":110,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43592,"byte_end":43595,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ `filled_u8` is the number of filled bytes in `dest`, which may be less than","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43596,"byte_end":43675,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/ the length of `dest`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43676,"byte_end":43701,"line_start":113,"line_end":113,"column_start":1,"column_end":26}},{"value":"/ `consumed_u32` is the number of words consumed from `src`, which is the same","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43702,"byte_end":43782,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/ as `filled_u8 / 4` rounded up.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43783,"byte_end":43817,"line_start":115,"line_end":115,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43818,"byte_end":43821,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43822,"byte_end":43835,"line_start":117,"line_end":117,"column_start":1,"column_end":14}},{"value":"/ (from `IsaacRng`)","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43836,"byte_end":43857,"line_start":118,"line_end":118,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43858,"byte_end":43861,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43862,"byte_end":43875,"line_start":120,"line_end":120,"column_start":1,"column_end":14}},{"value":"/ fn fill_bytes(&mut self, dest: &mut [u8]) {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43876,"byte_end":43923,"line_start":121,"line_end":121,"column_start":1,"column_end":48}},{"value":"/     let mut read_len = 0;","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43924,"byte_end":43953,"line_start":122,"line_end":122,"column_start":1,"column_end":30}},{"value":"/     while read_len < dest.len() {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43954,"byte_end":43991,"line_start":123,"line_end":123,"column_start":1,"column_end":38}},{"value":"/         if self.index >= self.rsl.len() {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":43992,"byte_end":44037,"line_start":124,"line_end":124,"column_start":1,"column_end":46}},{"value":"/             self.isaac();","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44038,"byte_end":44067,"line_start":125,"line_end":125,"column_start":1,"column_end":30}},{"value":"/         }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44068,"byte_end":44081,"line_start":126,"line_end":126,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44082,"byte_end":44085,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/         let (consumed_u32, filled_u8) =","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44086,"byte_end":44129,"line_start":128,"line_end":128,"column_start":1,"column_end":44}},{"value":"/             impls::fill_via_u32_chunks(&mut self.rsl[self.index..],","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44130,"byte_end":44201,"line_start":129,"line_end":129,"column_start":1,"column_end":72}},{"value":"/                                        &mut dest[read_len..]);","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44202,"byte_end":44268,"line_start":130,"line_end":130,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44269,"byte_end":44272,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/         self.index += consumed_u32;","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44273,"byte_end":44312,"line_start":132,"line_end":132,"column_start":1,"column_end":40}},{"value":"/         read_len += filled_u8;","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44313,"byte_end":44347,"line_start":133,"line_end":133,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44348,"byte_end":44357,"line_start":134,"line_end":134,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44358,"byte_end":44363,"line_start":135,"line_end":135,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44364,"byte_end":44371,"line_start":136,"line_end":136,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44924,"byte_end":44943,"line_start":151,"line_end":151,"column_start":8,"column_end":27},"name":"fill_via_u64_chunks","qualname":"::impls::fill_via_u64_chunks","value":"pub fn fill_via_u64_chunks(&[u64], &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[{"value":"/ Implement `fill_bytes` by reading chunks from the output buffer of a block","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44492,"byte_end":44570,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ based RNG.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44571,"byte_end":44585,"line_start":142,"line_end":142,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44586,"byte_end":44589,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ The return values are `(consumed_u64, filled_u8)`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44590,"byte_end":44644,"line_start":144,"line_end":144,"column_start":1,"column_end":55}},{"value":"/ `filled_u8` is the number of filled bytes in `dest`, which may be less than","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44645,"byte_end":44724,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/ the length of `dest`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44725,"byte_end":44750,"line_start":146,"line_end":146,"column_start":1,"column_end":26}},{"value":"/ `consumed_u64` is the number of words consumed from `src`, which is the same","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44751,"byte_end":44831,"line_start":147,"line_end":147,"column_start":1,"column_end":81}},{"value":"/ as `filled_u8 / 8` rounded up.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44832,"byte_end":44866,"line_start":148,"line_end":148,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44867,"byte_end":44870,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ See `fill_via_u32_chunks` for an example.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":44871,"byte_end":44916,"line_start":150,"line_end":150,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":45108,"byte_end":45125,"line_start":156,"line_end":156,"column_start":8,"column_end":25},"name":"next_u32_via_fill","qualname":"::impls::next_u32_via_fill","value":"pub fn next_u32_via_fill<R: RngCore + ?Sized>(&mut R) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u32` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[{"value":"/ Implement `next_u32` via `fill_bytes`, little-endian order.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":45037,"byte_end":45100,"line_start":155,"line_end":155,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":45281,"byte_end":45298,"line_start":161,"line_end":161,"column_start":8,"column_end":25},"name":"next_u64_via_fill","qualname":"::impls::next_u64_via_fill","value":"pub fn next_u64_via_fill<R: RngCore + ?Sized>(&mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[{"value":"/ Implement `next_u64` via `fill_bytes`, little-endian order.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\impls.rs","byte_start":45210,"byte_end":45273,"line_start":160,"line_end":160,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"le","qualname":"::le","value":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":122}],"decl_id":null,"docs":" Little-Endian utilities\n \n Little-Endian order has been chosen for internal usage; this makes some\n useful functions available.\n","sig":null,"attributes":[{"value":"/ Little-Endian utilities","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":45779,"byte_end":45806,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"/ ","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":45807,"byte_end":45811,"line_start":10,"line_end":10,"column_start":1,"column_end":5}},{"value":"/ Little-Endian order has been chosen for internal usage; this makes some","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":45812,"byte_end":45887,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ useful functions available.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":45888,"byte_end":45919,"line_start":12,"line_end":12,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":121},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":46447,"byte_end":46460,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::le::read_u32_into","value":"pub fn read_u32_into(&[u8], &mut [u32])","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"/ Reads unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":46331,"byte_end":46388,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"/ Borrowed from the `byteorder` crate.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":46389,"byte_end":46429,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":46430,"byte_end":46439,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":46648,"byte_end":46661,"line_start":42,"line_end":42,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::le::read_u64_into","value":"pub fn read_u64_into(&[u8], &mut [u64])","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"/ Reads unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":46532,"byte_end":46589,"line_start":39,"line_end":39,"column_start":1,"column_end":58}},{"value":"/ Borrowed from the `byteorder` crate.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":46590,"byte_end":46630,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"inline","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\le.rs","byte_start":46631,"byte_end":46640,"line_start":41,"line_end":41,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5295,"byte_end":5302,"line_start":138,"line_end":138,"column_start":11,"column_end":18},"name":"RngCore","qualname":"::RngCore","value":"RngCore","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" The core of a random number generator.","sig":null,"attributes":[{"value":"/ The core of a random number generator.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2105,"byte_end":2147,"line_start":62,"line_end":62,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2148,"byte_end":2151,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This trait encapsulates the low-level functionality common to all","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2152,"byte_end":2221,"line_start":64,"line_end":64,"column_start":1,"column_end":70}},{"value":"/ generators, and is the \"back end\", to be implemented by generators.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2222,"byte_end":2293,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/ End users should normally use the `Rng` trait from the [`rand`] crate,","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2294,"byte_end":2368,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/ which is automatically implemented for every type implementing `RngCore`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2369,"byte_end":2446,"line_start":67,"line_end":67,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2447,"byte_end":2450,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Three different methods for generating random data are provided since the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2451,"byte_end":2528,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ optimal implementation of each is dependent on the type of generator. There","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2529,"byte_end":2608,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ is no required relationship between the output of each; e.g. many","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2609,"byte_end":2678,"line_start":71,"line_end":71,"column_start":1,"column_end":70}},{"value":"/ implementations of [`fill_bytes`] consume a whole number of `u32` or `u64`","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2679,"byte_end":2757,"line_start":72,"line_end":72,"column_start":1,"column_end":79}},{"value":"/ values and drop any remaining unused bytes.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2758,"byte_end":2805,"line_start":73,"line_end":73,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2806,"byte_end":2809,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The [`try_fill_bytes`] method is a variant of [`fill_bytes`] allowing error","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2810,"byte_end":2889,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ handling; it is not deemed sufficiently useful to add equivalents for","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2890,"byte_end":2963,"line_start":76,"line_end":76,"column_start":1,"column_end":74}},{"value":"/ [`next_u32`] or [`next_u64`] since the latter methods are almost always used","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2964,"byte_end":3044,"line_start":77,"line_end":77,"column_start":1,"column_end":81}},{"value":"/ with algorithmic generators (PRNGs), which are normally infallible.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3045,"byte_end":3116,"line_start":78,"line_end":78,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3117,"byte_end":3120,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ Algorithmic generators implementing [`SeedableRng`] should normally have","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3121,"byte_end":3197,"line_start":80,"line_end":80,"column_start":1,"column_end":77}},{"value":"/ *portable, reproducible* output, i.e. fix Endianness when converting values","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3198,"byte_end":3277,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ to avoid platform differences, and avoid making any changes which affect","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3278,"byte_end":3354,"line_start":82,"line_end":82,"column_start":1,"column_end":77}},{"value":"/ output (except by communicating that the release has breaking changes).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3355,"byte_end":3430,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3431,"byte_end":3434,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ Typically implementators will implement only one of the methods available","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3435,"byte_end":3512,"line_start":85,"line_end":85,"column_start":1,"column_end":78}},{"value":"/ in this trait directly, then use the helper functions from the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3513,"byte_end":3579,"line_start":86,"line_end":86,"column_start":1,"column_end":67}},{"value":"/ [`impls`] module to implement the other methods.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3580,"byte_end":3632,"line_start":87,"line_end":87,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3633,"byte_end":3636,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ It is recommended that implementations also implement:","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3637,"byte_end":3695,"line_start":89,"line_end":89,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3696,"byte_end":3699,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ - `Debug` with a custom implementation which *does not* print any internal","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3700,"byte_end":3778,"line_start":91,"line_end":91,"column_start":1,"column_end":79}},{"value":"/   state (at least, [`CryptoRng`]s should not risk leaking state through","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3779,"byte_end":3854,"line_start":92,"line_end":92,"column_start":1,"column_end":76}},{"value":"/   `Debug`).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3855,"byte_end":3870,"line_start":93,"line_end":93,"column_start":1,"column_end":16}},{"value":"/ - `Serialize` and `Deserialize` (from Serde), preferably making Serde","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3871,"byte_end":3944,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/   support optional at the crate level in PRNG libs.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":3945,"byte_end":4000,"line_start":95,"line_end":95,"column_start":1,"column_end":56}},{"value":"/ - `Clone`, if possible.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4001,"byte_end":4028,"line_start":96,"line_end":96,"column_start":1,"column_end":28}},{"value":"/ - *never* implement `Copy` (accidental copies may cause repeated values).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4029,"byte_end":4106,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/ - *do not* implement `Default` for pseudorandom generators, but instead","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4107,"byte_end":4182,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/   implement [`SeedableRng`], to guide users towards proper seeding.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4183,"byte_end":4254,"line_start":99,"line_end":99,"column_start":1,"column_end":72}},{"value":"/   External / hardware RNGs can choose to implement `Default`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4255,"byte_end":4320,"line_start":100,"line_end":100,"column_start":1,"column_end":66}},{"value":"/ - `Eq` and `PartialEq` could be implemented, but are probably not useful.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4321,"byte_end":4398,"line_start":101,"line_end":101,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4399,"byte_end":4402,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4403,"byte_end":4416,"line_start":103,"line_end":103,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4417,"byte_end":4420,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ A simple example, obviously not generating very *random* output:","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4421,"byte_end":4489,"line_start":105,"line_end":105,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4490,"byte_end":4493,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4494,"byte_end":4501,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/ #![allow(dead_code)]","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4502,"byte_end":4526,"line_start":108,"line_end":108,"column_start":1,"column_end":25}},{"value":"/ use rand_core::{RngCore, Error, impls};","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4527,"byte_end":4570,"line_start":109,"line_end":109,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4571,"byte_end":4574,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ struct CountingRng(u64);","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4575,"byte_end":4603,"line_start":111,"line_end":111,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4604,"byte_end":4607,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ impl RngCore for CountingRng {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4608,"byte_end":4642,"line_start":113,"line_end":113,"column_start":1,"column_end":35}},{"value":"/     fn next_u32(&mut self) -> u32 {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4643,"byte_end":4682,"line_start":114,"line_end":114,"column_start":1,"column_end":40}},{"value":"/         self.next_u64() as u32","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4683,"byte_end":4717,"line_start":115,"line_end":115,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4718,"byte_end":4727,"line_start":116,"line_end":116,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4728,"byte_end":4731,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/     fn next_u64(&mut self) -> u64 {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4732,"byte_end":4771,"line_start":118,"line_end":118,"column_start":1,"column_end":40}},{"value":"/         self.0 += 1;","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4772,"byte_end":4796,"line_start":119,"line_end":119,"column_start":1,"column_end":25}},{"value":"/         self.0","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4797,"byte_end":4815,"line_start":120,"line_end":120,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4816,"byte_end":4825,"line_start":121,"line_end":121,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4826,"byte_end":4829,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/     fn fill_bytes(&mut self, dest: &mut [u8]) {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4830,"byte_end":4881,"line_start":123,"line_end":123,"column_start":1,"column_end":52}},{"value":"/         impls::fill_bytes_via_next(self, dest)","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4882,"byte_end":4932,"line_start":124,"line_end":124,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4933,"byte_end":4942,"line_start":125,"line_end":125,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4943,"byte_end":4946,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/     fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":4947,"byte_end":5023,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/         Ok(self.fill_bytes(dest))","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5024,"byte_end":5061,"line_start":128,"line_end":128,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5062,"byte_end":5071,"line_start":129,"line_end":129,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5072,"byte_end":5077,"line_start":130,"line_end":130,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5078,"byte_end":5085,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5086,"byte_end":5089,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5090,"byte_end":5124,"line_start":133,"line_end":133,"column_start":1,"column_end":35}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5125,"byte_end":5172,"line_start":134,"line_end":134,"column_start":1,"column_end":48}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5173,"byte_end":5212,"line_start":135,"line_end":135,"column_start":1,"column_end":40}},{"value":"/ [`next_u32`]: RngCore::next_u32","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5213,"byte_end":5248,"line_start":136,"line_end":136,"column_start":1,"column_end":36}},{"value":"/ [`next_u64`]: RngCore::next_u64","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5249,"byte_end":5284,"line_start":137,"line_end":137,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5611,"byte_end":5619,"line_start":145,"line_end":145,"column_start":8,"column_end":16},"name":"next_u32","qualname":"::RngCore::next_u32","value":"pub fn next_u32(&mut Self) -> u32","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Return the next random `u32`.","sig":null,"attributes":[{"value":"/ Return the next random `u32`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5309,"byte_end":5342,"line_start":139,"line_end":139,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5347,"byte_end":5350,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ RNGs must implement at least one method from this trait directly. In","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5355,"byte_end":5427,"line_start":141,"line_end":141,"column_start":5,"column_end":77}},{"value":"/ the case this method is not implemented directly, it can be implemented","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5432,"byte_end":5507,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/ using `self.next_u64() as u32` or via","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5512,"byte_end":5553,"line_start":143,"line_end":143,"column_start":5,"column_end":46}},{"value":"/ [`fill_bytes`](impls::next_u32_via_fill).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5558,"byte_end":5603,"line_start":144,"line_end":144,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5957,"byte_end":5965,"line_start":153,"line_end":153,"column_start":8,"column_end":16},"name":"next_u64","qualname":"::RngCore::next_u64","value":"pub fn next_u64(&mut Self) -> u64","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Return the next random `u64`.","sig":null,"attributes":[{"value":"/ Return the next random `u64`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5644,"byte_end":5677,"line_start":147,"line_end":147,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5682,"byte_end":5685,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ RNGs must implement at least one method from this trait directly. In","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5690,"byte_end":5762,"line_start":149,"line_end":149,"column_start":5,"column_end":77}},{"value":"/ the case this method is not implemented directly, it can be implemented","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5767,"byte_end":5842,"line_start":150,"line_end":150,"column_start":5,"column_end":80}},{"value":"/ via [`next_u32`](impls::next_u64_via_u32) or via","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5847,"byte_end":5899,"line_start":151,"line_end":151,"column_start":5,"column_end":57}},{"value":"/ [`fill_bytes`](impls::next_u64_via_fill).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5904,"byte_end":5949,"line_start":152,"line_end":152,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6738,"byte_end":6748,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"fill_bytes","qualname":"::RngCore::fill_bytes","value":"pub fn fill_bytes(&mut Self, &mut [u8])","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Fill `dest` with random data.","sig":null,"attributes":[{"value":"/ Fill `dest` with random data.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":5990,"byte_end":6023,"line_start":155,"line_end":155,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6028,"byte_end":6031,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ RNGs must implement at least one method from this trait directly. In","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6036,"byte_end":6108,"line_start":157,"line_end":157,"column_start":5,"column_end":77}},{"value":"/ the case this method is not implemented directly, it can be implemented","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6113,"byte_end":6188,"line_start":158,"line_end":158,"column_start":5,"column_end":80}},{"value":"/ via [`next_u*`](impls::fill_bytes_via_next) or","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6193,"byte_end":6243,"line_start":159,"line_end":159,"column_start":5,"column_end":55}},{"value":"/ via [`try_fill_bytes`](RngCore::try_fill_bytes); if this generator can","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6248,"byte_end":6322,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ fail the implementation must choose how best to handle errors here","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6327,"byte_end":6397,"line_start":161,"line_end":161,"column_start":5,"column_end":75}},{"value":"/ (e.g. panic with a descriptive message or log a warning and retry a few","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6402,"byte_end":6477,"line_start":162,"line_end":162,"column_start":5,"column_end":80}},{"value":"/ times).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6482,"byte_end":6493,"line_start":163,"line_end":163,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6498,"byte_end":6501,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ This method should guarantee that `dest` is entirely filled","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6506,"byte_end":6569,"line_start":165,"line_end":165,"column_start":5,"column_end":68}},{"value":"/ with new data, and may panic if this is impossible","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6574,"byte_end":6628,"line_start":166,"line_end":166,"column_start":5,"column_end":59}},{"value":"/ (e.g. reading past the end of a file that is being used as the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6633,"byte_end":6699,"line_start":167,"line_end":167,"column_start":5,"column_end":71}},{"value":"/ source of randomness).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6704,"byte_end":6730,"line_start":168,"line_end":168,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7475,"byte_end":7489,"line_start":184,"line_end":184,"column_start":8,"column_end":22},"name":"try_fill_bytes","qualname":"::RngCore::try_fill_bytes","value":"pub fn try_fill_bytes(&mut Self, &mut [u8]) -> Result<(), Error>","parent":{"krate":0,"index":123},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random data.","sig":null,"attributes":[{"value":"/ Fill `dest` entirely with random data.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6783,"byte_end":6825,"line_start":171,"line_end":171,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6830,"byte_end":6833,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ This is the only method which allows an RNG to report errors while","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6838,"byte_end":6908,"line_start":173,"line_end":173,"column_start":5,"column_end":75}},{"value":"/ generating random data thus making this the primary method implemented","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6913,"byte_end":6987,"line_start":174,"line_end":174,"column_start":5,"column_end":79}},{"value":"/ by external (true) RNGs (e.g. `OsRng`) which can fail. It may be used","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":6992,"byte_end":7065,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ directly to generate keys and to seed (infallible) PRNGs.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7070,"byte_end":7131,"line_start":176,"line_end":176,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7136,"byte_end":7139,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ Other than error handling, this method is identical to [`fill_bytes`];","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7144,"byte_end":7218,"line_start":178,"line_end":178,"column_start":5,"column_end":79}},{"value":"/ thus this may be implemented using `Ok(self.fill_bytes(dest))` or","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7223,"byte_end":7292,"line_start":179,"line_end":179,"column_start":5,"column_end":74}},{"value":"/ `fill_bytes` may be implemented with","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7297,"byte_end":7337,"line_start":180,"line_end":180,"column_start":5,"column_end":45}},{"value":"/ `self.try_fill_bytes(dest).unwrap()` or more specific error handling.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7342,"byte_end":7415,"line_start":181,"line_end":181,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7420,"byte_end":7423,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7428,"byte_end":7467,"line_start":183,"line_end":183,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8778,"byte_end":8787,"line_start":209,"line_end":209,"column_start":11,"column_end":20},"name":"CryptoRng","qualname":"::CryptoRng","value":"CryptoRng","parent":null,"children":[],"decl_id":null,"docs":" A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]\n implementation is supposed to be cryptographically secure.","sig":null,"attributes":[{"value":"/ A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7543,"byte_end":7618,"line_start":187,"line_end":187,"column_start":1,"column_end":76}},{"value":"/ implementation is supposed to be cryptographically secure.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7619,"byte_end":7681,"line_start":188,"line_end":188,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7682,"byte_end":7685,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ *Cryptographically secure generators*, also known as *CSPRNGs*, should","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7686,"byte_end":7760,"line_start":190,"line_end":190,"column_start":1,"column_end":75}},{"value":"/ satisfy an additional properties over other generators: given the first","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7761,"byte_end":7836,"line_start":191,"line_end":191,"column_start":1,"column_end":76}},{"value":"/ *k* bits of an algorithm's output","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7837,"byte_end":7874,"line_start":192,"line_end":192,"column_start":1,"column_end":38}},{"value":"/ sequence, it should not be possible using polynomial-time algorithms to","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7875,"byte_end":7950,"line_start":193,"line_end":193,"column_start":1,"column_end":76}},{"value":"/ predict the next bit with probability significantly greater than 50%.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":7951,"byte_end":8024,"line_start":194,"line_end":194,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8025,"byte_end":8028,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ Some generators may satisfy an additional property, however this is not","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8029,"byte_end":8104,"line_start":196,"line_end":196,"column_start":1,"column_end":76}},{"value":"/ required by this trait: if the CSPRNG's state is revealed, it should not be","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8105,"byte_end":8184,"line_start":197,"line_end":197,"column_start":1,"column_end":80}},{"value":"/ computationally-feasible to reconstruct output prior to this. Some other","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8185,"byte_end":8261,"line_start":198,"line_end":198,"column_start":1,"column_end":77}},{"value":"/ generators allow backwards-computation and are consided *reversible*.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8262,"byte_end":8335,"line_start":199,"line_end":199,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8336,"byte_end":8339,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ Note that this trait is provided for guidance only and cannot guarantee","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8340,"byte_end":8415,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/ suitability for cryptographic applications. In general it should only be","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8416,"byte_end":8492,"line_start":202,"line_end":202,"column_start":1,"column_end":77}},{"value":"/ implemented for well-reviewed code implementing well-regarded algorithms.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8493,"byte_end":8570,"line_start":203,"line_end":203,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8571,"byte_end":8574,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ Note also that use of a `CryptoRng` does not protect against other","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8575,"byte_end":8645,"line_start":205,"line_end":205,"column_start":1,"column_end":71}},{"value":"/ weaknesses such as seeding from a weak entropy source or leaking state.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8646,"byte_end":8721,"line_start":206,"line_end":206,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8722,"byte_end":8725,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: block::BlockRngCore","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8726,"byte_end":8767,"line_start":208,"line_end":208,"column_start":1,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9237,"byte_end":9248,"line_start":221,"line_end":221,"column_start":11,"column_end":22},"name":"SeedableRng","qualname":"::SeedableRng","value":"SeedableRng: Sized","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":135}],"decl_id":null,"docs":" A random number generator that can be explicitly seeded.","sig":null,"attributes":[{"value":"/ A random number generator that can be explicitly seeded.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8792,"byte_end":8852,"line_start":211,"line_end":211,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8853,"byte_end":8856,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ This trait encapsulates the low-level functionality common to all","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8857,"byte_end":8926,"line_start":213,"line_end":213,"column_start":1,"column_end":70}},{"value":"/ pseudo-random number generators (PRNGs, or algorithmic generators).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8927,"byte_end":8998,"line_start":214,"line_end":214,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":8999,"byte_end":9002,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ The `FromEntropy` trait from the [`rand`] crate is automatically","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9003,"byte_end":9071,"line_start":216,"line_end":216,"column_start":1,"column_end":69}},{"value":"/ implemented for every type implementing `SeedableRng`, providing","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9072,"byte_end":9140,"line_start":217,"line_end":217,"column_start":1,"column_end":69}},{"value":"/ a convenient `from_entropy()` constructor.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9141,"byte_end":9187,"line_start":218,"line_end":218,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9188,"byte_end":9191,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9192,"byte_end":9226,"line_start":220,"line_end":220,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10766,"byte_end":10770,"line_start":267,"line_end":267,"column_start":10,"column_end":14},"name":"Seed","qualname":"::SeedableRng::Seed","value":"type Seed: Sized + Default + AsMut<[u8]>;","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Seed type, which is restricted to types mutably-dereferencable as `u8`\n arrays (we recommend `[u8; N]` for some `N`).","sig":null,"attributes":[{"value":"/ Seed type, which is restricted to types mutably-dereferencable as `u8`","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9262,"byte_end":9336,"line_start":222,"line_end":222,"column_start":5,"column_end":79}},{"value":"/ arrays (we recommend `[u8; N]` for some `N`).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9341,"byte_end":9390,"line_start":223,"line_end":223,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9395,"byte_end":9398,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ It is recommended to seed PRNGs with a seed of at least circa 100 bits,","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9403,"byte_end":9478,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/ which means an array of `[u8; 12]` or greater to avoid picking RNGs with","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9483,"byte_end":9559,"line_start":226,"line_end":226,"column_start":5,"column_end":81}},{"value":"/ partially overlapping periods.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9564,"byte_end":9598,"line_start":227,"line_end":227,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9603,"byte_end":9606,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ For cryptographic RNG's a seed of 256 bits is recommended, `[u8; 32]`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9611,"byte_end":9685,"line_start":229,"line_end":229,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9690,"byte_end":9693,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9698,"byte_end":9701,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Implementing `SeedableRng` for RNGs with large seeds","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9706,"byte_end":9764,"line_start":232,"line_end":232,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9769,"byte_end":9772,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Note that the required traits `core::default::Default` and","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9777,"byte_end":9839,"line_start":234,"line_end":234,"column_start":5,"column_end":67}},{"value":"/ `core::convert::AsMut<u8>` are not implemented for large arrays","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9844,"byte_end":9911,"line_start":235,"line_end":235,"column_start":5,"column_end":72}},{"value":"/ `[u8; N]` with `N` > 32. To be able to implement the traits required by","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9916,"byte_end":9991,"line_start":236,"line_end":236,"column_start":5,"column_end":80}},{"value":"/ `SeedableRng` for RNGs with such large seeds, the newtype pattern can be","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9996,"byte_end":10072,"line_start":237,"line_end":237,"column_start":5,"column_end":81}},{"value":"/ used:","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10077,"byte_end":10086,"line_start":238,"line_end":238,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10091,"byte_end":10094,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10099,"byte_end":10106,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/ use rand_core::SeedableRng;","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10111,"byte_end":10142,"line_start":241,"line_end":241,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10147,"byte_end":10150,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ const N: usize = 64;","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10155,"byte_end":10179,"line_start":243,"line_end":243,"column_start":5,"column_end":29}},{"value":"/ pub struct MyRngSeed(pub [u8; N]);","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10184,"byte_end":10222,"line_start":244,"line_end":244,"column_start":5,"column_end":43}},{"value":"/ pub struct MyRng(MyRngSeed);","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10227,"byte_end":10259,"line_start":245,"line_end":245,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10264,"byte_end":10267,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ impl Default for MyRngSeed {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10272,"byte_end":10304,"line_start":247,"line_end":247,"column_start":5,"column_end":37}},{"value":"/     fn default() -> MyRngSeed {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10309,"byte_end":10344,"line_start":248,"line_end":248,"column_start":5,"column_end":40}},{"value":"/         MyRngSeed([0; N])","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10349,"byte_end":10378,"line_start":249,"line_end":249,"column_start":5,"column_end":34}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10383,"byte_end":10392,"line_start":250,"line_end":250,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10397,"byte_end":10402,"line_start":251,"line_end":251,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10407,"byte_end":10410,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ impl AsMut<[u8]> for MyRngSeed {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10415,"byte_end":10451,"line_start":253,"line_end":253,"column_start":5,"column_end":41}},{"value":"/     fn as_mut(&mut self) -> &mut [u8] {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10456,"byte_end":10499,"line_start":254,"line_end":254,"column_start":5,"column_end":48}},{"value":"/         &mut self.0","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10504,"byte_end":10527,"line_start":255,"line_end":255,"column_start":5,"column_end":28}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10532,"byte_end":10541,"line_start":256,"line_end":256,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10546,"byte_end":10551,"line_start":257,"line_end":257,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10556,"byte_end":10559,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ impl SeedableRng for MyRng {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10564,"byte_end":10596,"line_start":259,"line_end":259,"column_start":5,"column_end":37}},{"value":"/     type Seed = MyRngSeed;","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10601,"byte_end":10631,"line_start":260,"line_end":260,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10636,"byte_end":10639,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/     fn from_seed(seed: MyRngSeed) -> MyRng {","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10644,"byte_end":10692,"line_start":262,"line_end":262,"column_start":5,"column_end":53}},{"value":"/         MyRng(seed)","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10697,"byte_end":10720,"line_start":263,"line_end":263,"column_start":5,"column_end":28}},{"value":"/     }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10725,"byte_end":10734,"line_start":264,"line_end":264,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10739,"byte_end":10744,"line_start":265,"line_end":265,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10749,"byte_end":10756,"line_start":266,"line_end":266,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12055,"byte_end":12064,"line_start":290,"line_end":290,"column_start":8,"column_end":17},"name":"from_seed","qualname":"::SeedableRng::from_seed","value":"pub fn from_seed(Self::Seed) -> Self","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Create a new PRNG using the given seed.","sig":null,"attributes":[{"value":"/ Create a new PRNG using the given seed.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10808,"byte_end":10851,"line_start":269,"line_end":269,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10856,"byte_end":10859,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations are allowed to assume that bits in the seed are","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10864,"byte_end":10936,"line_start":271,"line_end":271,"column_start":5,"column_end":77}},{"value":"/ well distributed. That means usually that the number of one and zero","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":10941,"byte_end":11013,"line_start":272,"line_end":272,"column_start":5,"column_end":77}},{"value":"/ bits are about equal, and values like 0, 1 and (size - 1) are unlikely.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11018,"byte_end":11093,"line_start":273,"line_end":273,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11098,"byte_end":11101,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations are recommended to be reproducible. A PRNG seeded","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11106,"byte_end":11180,"line_start":275,"line_end":275,"column_start":5,"column_end":79}},{"value":"/ using this function with a fixed seed should produce the same sequence","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11185,"byte_end":11259,"line_start":276,"line_end":276,"column_start":5,"column_end":79}},{"value":"/ of output in the future and on different architectures (with for example","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11264,"byte_end":11340,"line_start":277,"line_end":277,"column_start":5,"column_end":81}},{"value":"/ different endianness).","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11345,"byte_end":11371,"line_start":278,"line_end":278,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11376,"byte_end":11379,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ It is however not required that this function yield the same state as a","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11384,"byte_end":11459,"line_start":280,"line_end":280,"column_start":5,"column_end":80}},{"value":"/ reference implementation of the PRNG given equivalent seed; if necessary","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11464,"byte_end":11540,"line_start":281,"line_end":281,"column_start":5,"column_end":81}},{"value":"/ another constructor replicating behaviour from a reference","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11545,"byte_end":11607,"line_start":282,"line_end":282,"column_start":5,"column_end":67}},{"value":"/ implementation can be added.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11612,"byte_end":11644,"line_start":283,"line_end":283,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11649,"byte_end":11652,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations should make sure `from_seed` never panics. In the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11657,"byte_end":11731,"line_start":285,"line_end":285,"column_start":5,"column_end":79}},{"value":"/ case that some special values (like an all zero seed) are not viable","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11736,"byte_end":11808,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ seeds it is preferable to map these to alternative constant value(s),","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11813,"byte_end":11886,"line_start":287,"line_end":287,"column_start":5,"column_end":78}},{"value":"/ for example `0xBAD5EEDu32` or `0x0DDB1A5E5BAD5EEDu64` (\"odd biases? bad","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11891,"byte_end":11966,"line_start":288,"line_end":288,"column_start":5,"column_end":80}},{"value":"/ seed\"). This is assuming only a small number of values must be rejected.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":11971,"byte_end":12047,"line_start":289,"line_end":289,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12881,"byte_end":12894,"line_start":306,"line_end":306,"column_start":8,"column_end":21},"name":"seed_from_u64","qualname":"::SeedableRng::seed_from_u64","value":"pub fn seed_from_u64(u64) -> Self","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Create a new PRNG using a `u64` seed.","sig":null,"attributes":[{"value":"/ Create a new PRNG using a `u64` seed.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12097,"byte_end":12138,"line_start":292,"line_end":292,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12143,"byte_end":12146,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ This is a convenience-wrapper around `from_seed` to allow construction","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12151,"byte_end":12225,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ of any `SeedableRng` from a simple `u64` value. It is designed such that","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12230,"byte_end":12306,"line_start":295,"line_end":295,"column_start":5,"column_end":81}},{"value":"/ low Hamming Weight numbers like 0 and 1 can be used and should still","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12311,"byte_end":12383,"line_start":296,"line_end":296,"column_start":5,"column_end":77}},{"value":"/ result in good, independent seeds to the PRNG which is returned.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12388,"byte_end":12456,"line_start":297,"line_end":297,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12461,"byte_end":12464,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ This **is not suitable for cryptography**, as should be clear given that","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12469,"byte_end":12545,"line_start":299,"line_end":299,"column_start":5,"column_end":81}},{"value":"/ the input size is only 64 bits.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12550,"byte_end":12585,"line_start":300,"line_end":300,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12590,"byte_end":12593,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Implementations for PRNGs *may* provide their own implementations of","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12598,"byte_end":12670,"line_start":302,"line_end":302,"column_start":5,"column_end":77}},{"value":"/ this function, but the default implementation should be good enough for","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12675,"byte_end":12750,"line_start":303,"line_end":303,"column_start":5,"column_end":80}},{"value":"/ all purposes. *Changing* the implementation of this function should be","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12755,"byte_end":12829,"line_start":304,"line_end":304,"column_start":5,"column_end":79}},{"value":"/ considered a value-breaking change.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":12834,"byte_end":12873,"line_start":305,"line_end":305,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15589,"byte_end":15597,"line_start":363,"line_end":363,"column_start":8,"column_end":16},"name":"from_rng","qualname":"::SeedableRng::from_rng","value":"pub fn from_rng<R: RngCore>(R) -> Result<Self, Error>","parent":{"krate":0,"index":129},"children":[],"decl_id":null,"docs":" Create a new PRNG seeded from another `Rng`.","sig":null,"attributes":[{"value":"/ Create a new PRNG seeded from another `Rng`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":13829,"byte_end":13877,"line_start":331,"line_end":331,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":13882,"byte_end":13885,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This is the recommended way to initialize PRNGs with fresh entropy. The","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":13890,"byte_end":13965,"line_start":333,"line_end":333,"column_start":5,"column_end":80}},{"value":"/ `FromEntropy` trait from the [`rand`] crate provides a convenient","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":13970,"byte_end":14039,"line_start":334,"line_end":334,"column_start":5,"column_end":74}},{"value":"/ `from_entropy` method based on `from_rng`.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14044,"byte_end":14090,"line_start":335,"line_end":335,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14095,"byte_end":14098,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Usage of this method is not recommended when reproducibility is required","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14103,"byte_end":14179,"line_start":337,"line_end":337,"column_start":5,"column_end":81}},{"value":"/ since implementing PRNGs are not required to fix Endianness and are","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14184,"byte_end":14255,"line_start":338,"line_end":338,"column_start":5,"column_end":76}},{"value":"/ allowed to modify implementations in new releases.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14260,"byte_end":14314,"line_start":339,"line_end":339,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14319,"byte_end":14322,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ It is important to use a good source of randomness to initialize the","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14327,"byte_end":14399,"line_start":341,"line_end":341,"column_start":5,"column_end":77}},{"value":"/ PRNG. Cryptographic PRNG may be rendered insecure when seeded from a","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14404,"byte_end":14476,"line_start":342,"line_end":342,"column_start":5,"column_end":77}},{"value":"/ non-cryptographic PRNG or with insufficient entropy.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14481,"byte_end":14537,"line_start":343,"line_end":343,"column_start":5,"column_end":61}},{"value":"/ Many non-cryptographic PRNGs will show statistical bias in their first","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14542,"byte_end":14616,"line_start":344,"line_end":344,"column_start":5,"column_end":79}},{"value":"/ results if their seed numbers are small or if there is a simple pattern","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14621,"byte_end":14696,"line_start":345,"line_end":345,"column_start":5,"column_end":80}},{"value":"/ between them.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14701,"byte_end":14718,"line_start":346,"line_end":346,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14723,"byte_end":14726,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Prefer to seed from a strong external entropy source like `OsRng` from","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14731,"byte_end":14805,"line_start":348,"line_end":348,"column_start":5,"column_end":79}},{"value":"/ the [`rand_os`] crate or from a cryptographic PRNG; if creating a new","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14810,"byte_end":14883,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"/ generator for cryptographic uses you *must* seed from a strong source.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14888,"byte_end":14962,"line_start":350,"line_end":350,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14967,"byte_end":14970,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Seeding a small PRNG from another small PRNG is possible, but","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":14975,"byte_end":15040,"line_start":352,"line_end":352,"column_start":5,"column_end":70}},{"value":"/ something to be careful with. An extreme example of how this can go","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15045,"byte_end":15116,"line_start":353,"line_end":353,"column_start":5,"column_end":76}},{"value":"/ wrong is seeding an Xorshift RNG from another Xorshift RNG, which","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15121,"byte_end":15190,"line_start":354,"line_end":354,"column_start":5,"column_end":74}},{"value":"/ will effectively clone the generator. In general seeding from a","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15195,"byte_end":15262,"line_start":355,"line_end":355,"column_start":5,"column_end":72}},{"value":"/ generator which is hard to predict is probably okay.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15267,"byte_end":15323,"line_start":356,"line_end":356,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15328,"byte_end":15331,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations are allowed to assume that a good RNG is provided","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15336,"byte_end":15410,"line_start":358,"line_end":358,"column_start":5,"column_end":79}},{"value":"/ for seeding, and that it is cryptographically secure when appropriate.","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15415,"byte_end":15489,"line_start":359,"line_end":359,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15494,"byte_end":15497,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15502,"byte_end":15536,"line_start":361,"line_end":361,"column_start":5,"column_end":39}},{"value":"/ [`rand_os`]: https://docs.rs/rand_os","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":15541,"byte_end":15581,"line_start":362,"line_end":362,"column_start":5,"column_end":45}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20919,"byte_end":20928,"line_start":52,"line_end":52,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22449,"byte_end":22454,"line_start":98,"line_end":98,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":24024,"byte_end":24029,"line_start":142,"line_end":142,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":24432,"byte_end":24437,"line_start":155,"line_end":155,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":24660,"byte_end":24665,"line_start":166,"line_end":166,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29877,"byte_end":29885,"line_start":121,"line_end":121,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30181,"byte_end":30189,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":31448,"byte_end":31456,"line_start":171,"line_end":171,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":33578,"byte_end":33586,"line_start":239,"line_end":239,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35551,"byte_end":35561,"line_start":293,"line_end":293,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35907,"byte_end":35917,"line_start":304,"line_end":304,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":37274,"byte_end":37284,"line_start":347,"line_end":347,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":39308,"byte_end":39318,"line_start":414,"line_end":414,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":39756,"byte_end":39764,"line_start":433,"line_end":433,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":16703,"byte_end":16706,"line_start":399,"line_end":399,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":17596,"byte_end":17599,"line_start":434,"line_end":434,"column_start":43,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2069,"byte_end":2074,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":32}},{"kind":"Mod","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2084,"byte_end":2089,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":96}},{"kind":"Mod","span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":2099,"byte_end":2101,"line_start":59,"line_end":59,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":118}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":20919,"byte_end":20928,"line_start":52,"line_end":52,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":22449,"byte_end":22454,"line_start":98,"line_end":98,"column_start":6,"column_end":11},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":179},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":24024,"byte_end":24029,"line_start":142,"line_end":142,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":179},"to":{"krate":2,"index":6327}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":24432,"byte_end":24437,"line_start":155,"line_end":155,"column_start":19,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":179},"to":{"krate":1,"index":1690}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\error.rs","byte_start":24660,"byte_end":24665,"line_start":166,"line_end":166,"column_start":26,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":1,"index":2591},"to":{"krate":2,"index":1889}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":29877,"byte_end":29885,"line_start":121,"line_end":121,"column_start":51,"column_end":59},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":6322}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":30181,"byte_end":30189,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":31448,"byte_end":31456,"line_start":171,"line_end":171,"column_start":45,"column_end":53},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":185},"to":{"krate":0,"index":123}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":33578,"byte_end":33586,"line_start":239,"line_end":239,"column_start":53,"column_end":61},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":185},"to":{"krate":0,"index":129}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35551,"byte_end":35561,"line_start":293,"line_end":293,"column_start":51,"column_end":61},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":193},"to":{"krate":2,"index":6322}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":35907,"byte_end":35917,"line_start":304,"line_end":304,"column_start":23,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":37274,"byte_end":37284,"line_start":347,"line_end":347,"column_start":45,"column_end":55},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":193},"to":{"krate":0,"index":123}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":39308,"byte_end":39318,"line_start":414,"line_end":414,"column_start":53,"column_end":63},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":193},"to":{"krate":0,"index":129}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\block.rs","byte_start":39756,"byte_end":39764,"line_start":433,"line_end":433,"column_start":49,"column_end":57},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":185},"to":{"krate":0,"index":128}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":9250,"byte_end":9255,"line_start":221,"line_end":221,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1976},"to":{"krate":0,"index":129}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":16703,"byte_end":16706,"line_start":399,"line_end":399,"column_start":39,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":123}},{"span":{"file_name":"C:\\Users\\10405\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand_core-0.4.2\\src\\lib.rs","byte_start":17596,"byte_end":17599,"line_start":434,"line_end":434,"column_start":43,"column_end":46},"kind":{"Impl":{"id":15}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":128}}]}